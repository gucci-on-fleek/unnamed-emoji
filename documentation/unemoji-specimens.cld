#!/usr/bin/env -S context --once
-- -*- mode: lua; -*-
-- vim: syntax=lua

-- unnamed-emoji
-- https://github.com/gucci-on-fleek/unnamed-emoji
-- SPDX-License-Identifier: MPL-2.0+
-- SPDX-FileCopyrightText: 2023 Max Chernoff

luatex.wrapup(function()
    os.execute(
        "qpdf --verbose --linearize --compress-streams=y --recompress-flate --compression-level=9 --object-streams=generate --remove-unreferenced-resources=yes --replace-input " ..
        file.replacesuffix(environment.jobname, "pdf")
    )
end)

context.stepwise(function() print(xpcall(function()

context.usemodule { "unnamed-emoji" }
context[[
    \define[2]\emojicell{%
        \strut\scale[s=10]{\emoji[#1]{#2}}%
    }
]]
context.step()
local unemoji = thirddata.unemoji


local known_fonts = {}
dir.globpattern("../fonts/", "**.pdf", false, function(name)
    unemoji.chars(name)
    known_fonts[#known_fonts+1] = file.nameonly(name)
end)
table.sort(known_fonts)


local all_chars = {}
for font, t in table.sortedpairs(unemoji.chars) do
    for name, t in table.sortedpairs(t) do
        local unicode = t.unicode

        if unicode then
            local current = all_chars[unicode] or {}
            all_chars[unicode] = current

            local fonts = current.fonts or {}
            current.fonts = fonts
            table.merge(fonts, { [file.nameonly(font)] = true })

            current.found = current.found or {}
            current.found[name] = true
        end
    end
end


context.setupTABLE( { frame = "off" })
context.setupTABLE( { "row" }, { "each" }, { align = "center", style = "tt" })
context.setupTABLE( { "row" }, { "first" }, { style = "ttbf" })
context.setupTABLE( { "column" }, { "each" }, { width = "1.5in" })
context.setupalign { "lesshyphenation", "verytolerant" }

context.starttext()
for char, data in table.sortedpairs(all_chars) do
    context.step()

    context.pushcatcodes("text")
    context.setupuserpagenumber {
        viewerprefix = char,
        state = "stop",
    }
    context.popcatcodes()

    context.startTEXpage()
    context.startTABLE()
    context.stepwise(function()

    context.NC { nc = tostring(#known_fonts) }
    for name, _ in table.sortedpairs(data.found) do
        if not tonumber(name, 10) and
           name ~= char
        then
            context.verbatim(name)
            context.qquad()
        end
    end

    if utf8.len(char) == 1 then
        context.verbatim(tostring(utf8.codepoint(char)))
    end

    context.NC() context.NR()

    for i, font in ipairs(known_fonts) do
        context.NC()
        if data.fonts[font] then
            context.verbatim.emojicell(font, char)
        end
    end
    context.NC() context.NR()


    for i, font in ipairs(known_fonts) do
        context.NC()
        context(font)
    end
    context.NC() context.NR()

    end)
    context.stopTABLE()
    context.stopTEXpage()
    context.step()

    for _, page in ipairs(structures.pages.tobesaved) do
        page.status = "stop"
    end
end
context.stoptext()

end, debug.traceback)) end)
